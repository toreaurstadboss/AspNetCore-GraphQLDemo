<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
    <h2>Highest mountains in Norwegian muncipialities</h2>
    <p>Dynamic data and dynamic table retrieved using Apollo client and GraphQL</p>

    <p>Enter GraphQL query below</p>

    <div class="row" style="padding:10px">
        <textarea id="GraphQLQuery" class="col-md-6 form-control"></textarea>
        <button id="btnLoadData" class="btn btn-success col-md-3 offset-3"><i class="fa-cloud-download fa"></i>&nbsp;Load data</button>
    </div>   

    <table id="mountainsTable" class="table table-striped table-hover table-dark">
        <thead>
            <tr id="mountainsTableHeaderRow"></tr>
            <tbody id="mountainsTableBody"></tbody>
        </thead>
    </table>

  
    @*<script src="https://unpkg.com/apollo-client-browser@1.7.0"></script>*@ <!-- Use this CDN if convenient, version 1.7.0 of Apollo-Client ported to browser ready version copied locally below.-->
    <script src="~/js/apollo-client.min.js"></script>

    <script>

        function LoadData() {

            var apolloClient = new Apollo.lib.ApolloClient({
                networkInterface: Apollo.lib.createNetworkInterface({
                    uri: 'http://localhost:2542/graphql',
                    transportBatching: true,
                }), connectToDevTools: true
            });

            var gqlQueryContents = $("#GraphQLQuery").val();

            var query = Apollo.gql(gqlQueryContents);

            var tableBody = $("#mountainsTableBody");
            tableBody.empty();

            var tableHeaderRow = $("#mountainsTableHeaderRow");
            tableHeaderRow.empty();

            apolloClient.query({
                query: query,
                variables: {}
            }).then(result => {             

                var rowIndex = 0;
                var columnHeaders = [];

                result.data.mountains.forEach(mountain => {

                    if (rowIndex == 0) {                        
                        Object.keys(mountain).forEach(key => {
                            if (key === '__typename') {
                                return;
                            }
                            tableHeaderRow.append(`<th>${key}</th>`);
                        });;
                    }                    

                    tableBody.append('<tr>');

                    Object.keys(mountain).forEach(key => {      
                          if (key === '__typename') {
                                return;
                            }
                        tableBody.append(`<td>${mountain[key]}</td>`)

                    });

                    tableBody.append('</tr>');                   

                    rowIndex++;

                });

            });
        }       

        $("#btnLoadData").click(function () {
            LoadData();
        });

        $(document).ready(function() {

            console.log('loading');

            var initialQuery = `
            {
                mountains { 
                    id
                    fylke: county
                    kommune: muncipiality
                    hoydeOverHavet: calculatedMetresAboveSeaLevel
                    offisieltNavn: officialName
                    primaerfaktor: calculatedPrimaryFactor
                    referansePunkt: referencePoint
                }
            }`;

            $("#GraphQLQuery").val(initialQuery);

            //LoadData();

        });

    </script>

</body>
</html>
